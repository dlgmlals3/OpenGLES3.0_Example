#include "InstanceCube.h"

#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <sstream>

#include "Cache.h"
//#include "Transform.h"
#include "constant.h"
#include "type_ptr.hpp"
#include "string_cast.hpp"

#define VERTEX_SHADER_PRG			( char * )"shader/GeometricInstancingVertex.glsl"
#define FRAGMENT_SHADER_PRG			( char * )"shader/GeometricInstancingFragment.glsl"

#define VERTEX_LOCATION 0
#define COLOR_LOCATION 1

#define MATRIX1_LOCATION 2
#define MATRIX2_LOCATION 3
#define MATRIX3_LOCATION 4
#define MATRIX4_LOCATION 5

// Global Object Declaration

/*!
	Simple Default Constructor

	\param[in] None.
	\return None

*/
InstanceCube::InstanceCube( Renderer* parent )
{
	if (!parent)
		return;

	MapRenderHandler	= parent;
	ProgramManagerObj	= parent->RendererProgramManager();
	TransformObj		= parent->RendererTransform();
	modelType 			= CubeType;
}


/*!
	Simple Destructor

	\param[in] None.
	\return None

*/
InstanceCube::~InstanceCube()
{
	PROGRAM* program = NULL;
	if ( program = ProgramManagerObj->Program( ( char * )"Cube" ) )
	{
		ProgramManagerObj->RemoveProgram(program);
	}
	glDeleteBuffers(1, &vId);
	glDeleteBuffers(1, &iId);
}

/*!
	Initialize the scene, reserve shaders, compile and cache program

	\param[in] None.
	\return None

*/

void InstanceCube::InitModel()
{
    // ============================
    // üìå 1. ÏÖ∞Ïù¥Îçî ÌîÑÎ°úÍ∑∏Îû® Ï¥àÍ∏∞Ìôî
    // ============================
    if (!(program = ProgramManagerObj->Program((char *)"Cube"))) {
        program = ProgramManagerObj->ProgramInit((char *)"Cube");
        ProgramManagerObj->AddProgram(program);
    }

    // ============================
    // üìå 2. ÏÖ∞Ïù¥Îçî Î°úÎìú Î∞è Ïª¥ÌååÏùº
    // ============================
    program->VertexShader   = ShaderManager::ShaderInit(VERTEX_SHADER_PRG, GL_VERTEX_SHADER);
    program->FragmentShader = ShaderManager::ShaderInit(FRAGMENT_SHADER_PRG, GL_FRAGMENT_SHADER);

    // üìå 2-1. Ï†ïÏ†ê ÏÖ∞Ïù¥Îçî(Shader) Ïª¥ÌååÏùº
    CACHE *m = reserveCache(VERTEX_SHADER_PRG, true);
    if (m) {
        if (!ShaderManager::ShaderCompile(program->VertexShader, (char *)m->buffer, 1))
            exit(1);
        freeCache(m);
    }

    // üìå 2-2. ÌîÑÎûòÍ∑∏Î®ºÌä∏ ÏÖ∞Ïù¥Îçî(Shader) Ïª¥ÌååÏùº
    m = reserveCache(FRAGMENT_SHADER_PRG, true);
    if (m) {
        if (!ShaderManager::ShaderCompile(program->FragmentShader, (char *)m->buffer, 1))
            exit(2);
        freeCache(m);
    }

    // üìå 2-3. ÏÖ∞Ïù¥Îçî ÌîÑÎ°úÍ∑∏Îû® ÎßÅÌÅ¨
    if (!ProgramManagerObj->ProgramLink(program, 1))
        exit(3);

    glUseProgram(program->ProgramID);  // ÌîÑÎ°úÍ∑∏Îû® ÌôúÏÑ±Ìôî


    // ============================
    // üìå 3. VBO (Vertex Buffer Object) ÏÉùÏÑ± Î∞è Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
    // ============================
    size = 24 * sizeof(float);
    glGenBuffers(1, &vId);
    glBindBuffer(GL_ARRAY_BUFFER, vId);
    glBufferData(GL_ARRAY_BUFFER, size + size, 0, GL_STATIC_DRAW);
    glBufferSubData(GL_ARRAY_BUFFER, 0, size, cubeVerts);   // Ï†ïÏ†ê Îç∞Ïù¥ÌÑ∞ ÏóÖÎ°úÎìú
    glBufferSubData(GL_ARRAY_BUFFER, size, size, cubeColors); // ÏÉâÏÉÅ Îç∞Ïù¥ÌÑ∞ ÏóÖÎ°úÎìú

    // ============================
    // üìå 4. Î≥ÄÌôò ÌñâÎ†¨Ïö© VBO ÏÉùÏÑ±
    // ============================
    glGenBuffers(1, &matrixId);
    glBindBuffer(GL_ARRAY_BUFFER, matrixId);

    glm::mat4 transformMatrix[dimension][dimension][dimension]; // 3D ÌñâÎ†¨ Î∞∞Ïó¥ ÏÉùÏÑ±
    glBufferData(GL_ARRAY_BUFFER, sizeof(transformMatrix), 0, GL_DYNAMIC_DRAW); // ÎèôÏ†Å Ìï†Îãπ

    // ============================
    // üìå 5. IBO (Index Buffer Object) ÏÉùÏÑ±
    // ============================
    unsigned short indexSize = sizeof(unsigned short) * 36;
    glGenBuffers(1, &iId);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, iId);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indexSize, 0, GL_STATIC_DRAW);
    glBufferSubData(GL_ELEMENT_ARRAY_BUFFER, 0, indexSize, cubeIndices); // Ïù∏Îç±Ïä§ Îç∞Ïù¥ÌÑ∞ ÏóÖÎ°úÎìú

    // ============================
    // üìå 6. VAO (Vertex Array Object) ÏÉùÏÑ± Î∞è ÏÑ§Ï†ï
    // ============================
    glGenVertexArrays(1, &Vertex_VAO_Id);
    glBindVertexArray(Vertex_VAO_Id);

    // üìå 6-1. VBO Î∞îÏù∏Îî© Î∞è ÏÜçÏÑ± ÏÑ§Ï†ï
    glBindBuffer(GL_ARRAY_BUFFER, vId);
    glEnableVertexAttribArray(VERTEX_LOCATION);
    glEnableVertexAttribArray(COLOR_LOCATION);
    glVertexAttribPointer(VERTEX_LOCATION, 3, GL_FLOAT, GL_FALSE, 0, (void*)0);
    glVertexAttribPointer(COLOR_LOCATION, 3, GL_FLOAT, GL_FALSE, 0, (void*)size);

    // üìå 6-2. Î≥ÄÌôò ÌñâÎ†¨Ïö© VBO ÏÜçÏÑ± ÏÑ§Ï†ï
    glBindBuffer(GL_ARRAY_BUFFER, matrixId);
    glEnableVertexAttribArray(MATRIX1_LOCATION);
    glEnableVertexAttribArray(MATRIX2_LOCATION);
    glEnableVertexAttribArray(MATRIX3_LOCATION);
    glEnableVertexAttribArray(MATRIX4_LOCATION);

    // ÌïúÎ≤àÏóê mat4 ÌÉÄÏûÖÏùÑ Ï†ÑÎã¨Ìï† Ïàò ÏóÜÍ∏∞Ïóê, float 4Í∞úÏî© Î¨∂Ïùå,
    // ÌòÑÏû¨ Î∞îÏù∏Îî© Îêú VBOÌäπÏ†ï ÏúÑÏπòÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º ÏùΩÏñ¥ÏôÄÏÑú Ïñ¥Ìä∏Î¶¨Î∑∞Ìä∏Î°ú ÏÇ¨Ïö©ÌïòÎèÑÎ°ù ÏßÄÏ†ï.
    glVertexAttribPointer(MATRIX1_LOCATION, 4, GL_FLOAT, GL_FALSE, sizeof(glm::mat4), (void*)(sizeof(float) * 0)); // 1 Ìñâ
    glVertexAttribPointer(MATRIX2_LOCATION, 4, GL_FLOAT, GL_FALSE, sizeof(glm::mat4), (void*)(sizeof(float) * 4)); // 2 Ìñâ
    glVertexAttribPointer(MATRIX3_LOCATION, 4, GL_FLOAT, GL_FALSE, sizeof(glm::mat4), (void*)(sizeof(float) * 8));
    glVertexAttribPointer(MATRIX4_LOCATION, 4, GL_FLOAT, GL_FALSE, sizeof(glm::mat4), (void*)(sizeof(float) * 12));

    // üìå 6-3. Ïù∏Ïä§ÌÑ¥Ïä§Î≥Ñ Î≥ÄÌôò ÌñâÎ†¨ Ï†ÅÏö© (Divisor ÏÑ§Ï†ï)
    // 0 : Í∞Å Ï†ïÏ†ê ÎßàÎã§  vertex Ïñ¥Ìä∏Î¶¨Î∑∞Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
    // 1 : Í∞Å Ïù∏Ïä§ÌÑ¥Ïä§ ÎßàÎã§ vertex Ïñ¥Ìä∏Î¶¨Î∑∞Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
    // n : nÍ∞úÏùò Ïù∏Ïä§ÌÑ¥Ïä§ ÎßàÎã§ vertex Ïñ¥Ìä∏Î¶¨Î∑∞Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
    glVertexAttribDivisor(MATRIX1_LOCATION, 1);
    glVertexAttribDivisor(MATRIX2_LOCATION, 1);
    glVertexAttribDivisor(MATRIX3_LOCATION, 1);
    glVertexAttribDivisor(MATRIX4_LOCATION, 1);

    // üìå 6-4. IBO Î∞îÏù∏Îî©
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, iId);

    // üìå 6-5. VAOÎ•º Î≥¥Ìò∏ (Ïô∏Î∂Ä ÏΩîÎìúÍ∞Ä Î≥ÄÍ≤ΩÌïòÏßÄ Î™ªÌïòÎèÑÎ°ù)
    glBindVertexArray(0);
}


/*!
	Initialize the scene, reserve shaders, compile and cache program

	\param[in] None.
	\return None

*/
void InstanceCube::Render()
{
    glEnable( GL_DEPTH_TEST );

    glUseProgram( program->ProgramID );

    RenderOrigin();
    //RenderCube();
    //RenderRandomCube();
}

// Ïù∏Ïä§ÌÑ¥Ïä§ Î†åÎçîÎßÅ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÍ≥†
void InstanceCube::RenderOrigin() {
    char loc = ProgramManagerObj->ProgramGetUniformLocation(program, (char*)"MODELVIEWPROJECTIONMATRIX");
    float dist = -distance * dimension / 2.0;
    static float l = 0;

    TransformObj->TransformSetMatrixMode(VIEW_MATRIX);
    TransformObj->TransformTranslate(0, 0, -150);

    TransformObj->TransformSetMatrixMode(MODEL_MATRIX);
    TransformObj->TransformRotate(l++, 0, 1, 0);
    TransformObj->TransformTranslate(dist,  dist, dist);

    glm::mat4 projectionMatrix  = *TransformObj->TransformGetProjectionMatrix();
    glm::mat4 viewMatrix        = *TransformObj->TransformGetViewMatrix();
    glm::mat4 modelMatrix       = *TransformObj->TransformGetModelMatrix();

    glBindVertexArray(Vertex_VAO_Id);
    //LOGI("dlgmlasl3 loc : %d vao : %d", loc, Vertex_VAO_Id);

    for ( int i = 0; i < dimension; i++ ) {
        for (int j = 0; j < dimension; j++) {
            for (int k = 0; k < dimension; k++) {
                glm::mat4 mvp = projectionMatrix * viewMatrix
                        * glm::translate(modelMatrix, glm::vec3( i * 5, j * 5, k * 5));
                glUniformMatrix4fv(loc, 1, GL_FALSE, glm::value_ptr(mvp));
                glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_SHORT, 0);
                CheckGLAPI("1");
            }
        }
    }
}

void InstanceCube::RenderRandomCube() {
    static float l = 0;
    float dist = -distance * dimension / 2.0;

    TransformObj->TransformSetMatrixMode(VIEW_MATRIX);
    TransformObj->TransformTranslate(0, 0, -150);
    glBindBuffer(GL_ARRAY_BUFFER, matrixId);

    TransformObj->TransformSetMatrixMode(MODEL_MATRIX);
    TransformObj->TransformRotate(l++, 0, 1, 0);
    TransformObj->TransformTranslate(dist,  dist, dist);

    glm::mat4 projectionMatrix = *(TransformObj->TransformGetProjectionMatrix());
    glm::mat4 viewMatrix = *(TransformObj->TransformGetViewMatrix());
    glm::mat4 modelMatrix = *(TransformObj->TransformGetModelMatrix());

    int count = dimension * dimension * dimension;
    //count = 10;
    GLsizeiptr length = (long)sizeof(glm::mat4) * count;

    auto matrixBuf = (glm::mat4*) glMapBufferRange(GL_ARRAY_BUFFER, 0,
                                                         length, GL_MAP_WRITE_BIT);
    int instance = 0;
    for (int i=0; i<count; i++) {
        int x = 3153 * i % 80;
        int y = 2421 * i % 80;
        int z = 1311 * i % 80;

        matrixBuf[instance++] = projectionMatrix * viewMatrix
                                * glm::translate(modelMatrix, glm::vec3(x, y, z));
    }
    glUnmapBuffer ( GL_ARRAY_BUFFER );
    glBindVertexArray(Vertex_VAO_Id);

    GLint maxIndex;
    glGetIntegerv(GL_MAX_ELEMENTS_INDICES, &maxIndex);
    // GPU ÌïúÎ≤à ÎìúÎ°úÏö∞ ÏΩúÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî ÏµúÎåÄ Ïù∏Îç±Ïä§ Í∞úÏàò 1048576 --> glDrawElementsInstanced count ÎÑòÏúºÎ©¥ ÏïàÎêå.

    // unsigned short indexSize = sizeof(unsigned short) * 36; <-- ÏúºÎ°ú Ïù∏ÌïòÏó¨ ÌÉÄÏûÖ UNSIGNED_SHORT
    glDrawElementsInstanced(GL_TRIANGLES, 36, GL_UNSIGNED_SHORT,
                            (void*)0, dimension * dimension * dimension);
}

void InstanceCube::RenderCube()
{
    // camera seting
    TransformObj->TransformSetMatrixMode(VIEW_MATRIX);
    TransformObj->TransformTranslate(0, 0, -100);

    glBindBuffer( GL_ARRAY_BUFFER, matrixId );
    GLsizeiptr length = (long)sizeof(glm::mat4) * dimension * dimension * dimension;
    glm::mat4* matrixBuf = (glm::mat4*)glMapBufferRange( GL_ARRAY_BUFFER, 0,
                                                         length, GL_MAP_WRITE_BIT);

    static float l = 0;
    float dist = -distance * dimension / 2.0;

    TransformObj->TransformSetMatrixMode(MODEL_MATRIX);
    TransformObj->TransformRotate(l++, 0, 1, 0);
    TransformObj->TransformTranslate(dist,  dist, dist);

    glm::mat4 projectionMatrix  = *TransformObj->TransformGetProjectionMatrix();
    glm::mat4 modelMatrix       = *TransformObj->TransformGetModelMatrix();
    glm::mat4 viewMatrix        = *TransformObj->TransformGetViewMatrix();
    int instance = 0;

    for ( int i = 0; i < dimension; i++ )
    {
        for ( int j = 0; j < dimension; j++ )
        {
            for ( int k = 0; k < dimension; k++ )
            {
                matrixBuf[instance++] = projectionMatrix * viewMatrix *
                        glm::translate(modelMatrix, glm::vec3( i*distance , j*distance, k*distance));
            }
        }
    }
    glUnmapBuffer ( GL_ARRAY_BUFFER );

    glBindVertexArray(Vertex_VAO_Id);
    glDrawElementsInstanced(GL_TRIANGLES, 36, GL_UNSIGNED_SHORT, (void*)0, dimension * dimension * dimension);
}

/*!
 This function handle Touch event down action.

 \param[in] x and y screen pixel position.

 \return None.
 */
void InstanceCube::TouchEventDown( float x, float y )
{
	Animate = !Animate;
}

